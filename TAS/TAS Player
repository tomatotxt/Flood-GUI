print("Latest TAS Player built for V63.21")
if Legit == nil then
    Legit = false
end
local SkipMirroredMaps = {
    ["Retro Coast"] = true,
    ["Zemblanity"] = true,
    ["Northren Mill"] = true,
    ["Mysterium"] = true,
    ["Decaying Silo"] = true,
    ["Active Volcanic Mines"] = true,
    ["Snowy Stronghold"] = true
}
if getgenv().whatthefuckisthisyoumayaskitisaverylongvariblename then
    for _,v in ipairs(getgenv().whatthefuckisthisyoumayaskitisaverylongvariblename) do
        SkipMirroredMaps[v] = true
    end
end
local Mirrored = false
local NewV = Vector3.new
local NewC = CFrame.new
local AngC = CFrame.fromEulerAnglesXYZ
local LP = game.Players.LocalPlayer
local CurrentCamera = workspace.CurrentCamera
local function toggleSlide(newValue)
    if newValue == true then
        LP.Character.HumanoidRootPart.Size = Vector3.new(2, 1, 1)
        LP.Character.FE2_Hitbox.Size = Vector3.new(2, 1, 1)
        LP.Character.Humanoid.HipHeight = -1.5
    else
        LP.Character.HumanoidRootPart.Size = Vector3.new(2, 2, 1)
        LP.Character.FE2_Hitbox.Size = Vector3.new(2, 2, 1)
        LP.Character.Humanoid.HipHeight = 0
    end
    LP.Character.Animate.Sliding:Fire(newValue)
end

local function doSlide(delay)
    toggleSlide(true)
    task.wait(delay)
    toggleSlide(false)
end

-- IMPORTANT
local CLMAIN = getsenv(LP.PlayerScripts.CL_MAIN_GameScript) -- {newAlert = print}
local Alert = CLMAIN.newAlert
Alert("Latest TAS Player built for V63.21", Color3.new(1, 1, 1))
local Multi = workspace.Multiplayer
local RS = game:GetService('RunService')

if not getrenv().alreadystarted then
    CLMAIN.newAlert("TAS Player Started.", Color3.fromRGB(255, 149, 5))
    getrenv().alreadystarted = true
else
    CLMAIN.newAlert("TAS Player ready for next map.", Color3.new(0,1,.5))
end

local DeathConnect
local function Cleanup()
    DeathConnect:Disconnect()
    print("Cleaning Up..")
    CLMAIN.newAlert("Resetting..", Color3.new(0, 1, 1))
    if LP.Character and LP.Character.Head then
        LP.Character.Head:Destroy()
    end
    LP.CharacterAdded:wait()
    task.wait(1)
    local RootPart = LP.Character:WaitForChild("HumanoidRootPart")
    for i = 1, 200 do
        RootPart.Velocity = Vector3.new(0, 1, 1000)
        task.wait()
    end
    return
end
DeathConnect = LP.Character.Humanoid.Died:Connect(Cleanup)

local Animate = getsenv(LP.Character.Animate)
local Map = Multi:WaitForChild('NewMap', 9e6)
local realMapName = Map:WaitForChild('Settings'):GetAttribute("MapName")
local mapName = game:GetService("HttpService"):UrlEncode(realMapName)
print(realMapName)
local success, path = 
    pcall(function()
        return game:HttpGet("https://raw.githubusercontent.com/tomatotxt/Flood-GUI/refs/heads/main/TAS%20FILES/".. mapName .. ".json")
    end)

if success and #path > 50 then
    print("TAS FILE IS REAL")
else
    print("TAS FILE BROKEN")
    Cleanup()
    -- Cleanup and Reset
    -- Respawn
    -- Set velocity to 0, 0, 1000
end
local TAS = game:GetService("HttpService"):JSONDecode(path)
print("Total Frames:", #TAS)
if not TAS then
    CLMAIN.newAlert("TAS file for "..mapName.." does not exist!", Color3.new(1,0,0))
    Cleanup()
else
CLMAIN.newAlert("TAS Loaded!")
repeat task.wait() until Map.Name == "Map"

local HighlightPath = game:GetService("Workspace").Multiplayer.Map.Settings:GetAttribute("Highlight")

if HighlightPath then
    CLMAIN.newAlert("Map cannot be mirrored.", Color3.fromRGB(255, 100, 0))
    Mirrored = false
else
    if SkipMirroredMaps[mapName] then
        CLMAIN.newAlert('Map cannot be mirrored.', Color3.fromRGB(255, 100, 0))
        Cleanup()
    else
        --if Map:WaitForChild('Settings'):FindFirstChild("_MirrorMap") then
        --    CLMAIN.newAlert('Map is not mirrored.', Color3.fromRGB(255, 149, 5))
            Mirrored = false
        --else
        --    CLMAIN.newAlert('Map is mirrored, TAS will be played mirrored!', Color3.fromRGB(255, 149, 5))
        --    Mirrored = true
        --end
    end
end

local Spawn = (function() -- new spawn finder by "tomato.txt" on discord
    
    local Spawn = nil

    local connections = {}
    for _,v in ipairs(Map:GetChildren()) do
        if v.Name == "Part" then
            table.insert(connections, v:GetPropertyChangedSignal("Rotation"):Connect(function()
                for _,v in ipairs(connections) do
                    v:Disconnect()
                end
                Spawn = v
            end))
        end
    end
    repeat task.wait() until Spawn or Map:FindFirstChild("Spawn", true)
    CLMAIN.newAlert("Spawn found!", Color3.fromRGB(0, 255, 0))
    return ((Spawn ~= nil) and Spawn) or Map:FindFirstChild("Spawn", true)
end)()


repeat task.wait() until LP.Character.HumanoidRootPart.Anchored == false
local TimeStart = tick()
CLMAIN.newAlert('TAS Running..', Color3.fromRGB(255, 149, 5))
PlayAnim = Animate.playAnimation
Animate.playAnimation = function()end

for _, v in next, Map:GetDescendants() do
    if v.Name == 'ButtonIcon' then
        local buttonPart = v.Parent.Parent:FindFirstChildOfClass('Part')
        if buttonPart ~= nil then
            buttonPart.Size = Vector3.new(6,6,6)
        end
    end
end

--[[
local ToggleSwim = function(val)
    LP.Character.Animate.ToggleSwim:Fire(val)
end
]]
local FE2_Hitbox = LP.Character.FE2_Hitbox
FE2_Hitbox.CanTouch = true

local function toggleTouch(bool)
    FE2_Hitbox.CanTouch = true
end

function isRandomString(str) -- basicly detects if button 99% of the time just checks if all capital
    for i = 1, #str do
        local ltr = str:sub(i, i)
        if ltr:lower() == ltr then
            return false
        end     
    end
    return true
end


local function badCheck(Thing) --  NOT walljump or NOT AIRTANK or explodingbutton hitbox :check:
    local Parent = Thing.Parent
    if not Thing:FindFirstChild("_Wall") then
        if Parent and not (Thing.Name == "Part" and isRandomString(Parent.Name)) then
            if Parent.Name == "AirTank" then
                return true
            end
            return true
        end
        return true
    end
    return false
end
local walljumpfix
walljumpfix = LP.Character.HumanoidRootPart.Touched:Connect(function(Thing)
    if badCheck(Thing) then
        toggleTouch(true)
    elseif Thing.Name == "RopeStart" then
        toggleTouch(true)
    else
        --print("Didn't Touch:", Thing:GetFullName())
    end
end)

local walljumpfix2
walljumpfix2 = LP.Character.HumanoidRootPart.TouchEnded:Connect(function(Thing)
    if badCheck(Thing) then
        toggleTouch(false)
    elseif Thing.Name == "RopeStart" then
        toggleTouch(false)
    end
end)

local function activateAnimation(CurrentAnimation)
    local CurrentAnimation = CurrentAnimation
    if LP.Character.Humanoid:GetState() == Enum.HumanoidStateType.Physics then
        CurrentAnimation[1] = "swing"
    end
    if CurrentAnimation and CurrentAnimation[1] and CurrentAnimation[2] and LP.Character and LP.Character.Humanoid then
        PlayAnim(CurrentAnimation[1],CurrentAnimation[2], LP.Character.Humanoid)
        if CurrentAnimation[1] == "walk" then
            Animate.setAnimationSpeed(.76) 
        elseif CurrentAnimation[1] == "slide" then
            task.spawn(doSlide, 0.25)
        end
    end
end

local Offset = Spawn.Position - NewV(0, 1000, 0)
local OldFrame = 3

local Loop
local Death

Death = LP.Character.Humanoid.Changed:Connect(function(Change)
    if Change == "Health" and LP.Character.Humanoid.Health == 0 then
        Death:Disconnect()
        Loop:Disconnect()
        CLMAIN.newAlert('Player Died.', Color3.new(1, 0, 0))
    end
end)

local RootPart = LP.Character.HumanoidRootPart
if Legit then
    RootPart.RootJoint.Enabled = false
end

Loop = RS.PostSimulation:Connect(function(DeltaTime) --Heartbeat
    LP.Character.Humanoid.Jump = true
    local NewFrame = #TAS
    local Divider = OldFrame + 30
    if Divider < #TAS then
        NewFrame = Divider
    end
    for i = OldFrame, NewFrame do
        local CurrentInfo = TAS[i]
        if (tick() - TimeStart) < CurrentInfo.time then
            break
        elseif i >= #TAS then
            CLMAIN.newAlert('TAS Run Finished!', Color3.new(0, 1, 0))
            CLMAIN.newAlert('TAS Player By Tomato & Moz', Color3.new(0, 1, 0))
            Death:Disconnect()
            Loop:Disconnect()
            DeathConnect:Disconnect()
            Animate.playAnimation = PlayAnim
            if LP.Character and LP.Character.Humanoid then
                Animate.playAnimation("idle", 0.1, LP.Character.Humanoid)
            end
            walljumpfix:Disconnect()
            walljumpfix2:Disconnect()
            toggleTouch(true)
            if Legit then
                RootPart.RootJoint.Enabled = true
            end
        elseif (tick() - TimeStart) >= CurrentInfo.time then
            OldFrame = i
            local CCFrame = CurrentInfo.CCFrame
            local CCameraCFrame = CurrentInfo.CCameraCFrame
            RootPart.CFrame = NewC(CCFrame[1], CCFrame[2], CCFrame[3]) * AngC(CCFrame[4], CCFrame[5], CCFrame[6]) + Offset
            --CurrentCamera.CFrame = NewC(CCameraCFrame[1], CCameraCFrame[2], CCameraCFrame[3]) * AngC(CCameraCFrame[4], CCameraCFrame[5], CCameraCFrame[6]) + Offset
            activateAnimation(CurrentInfo.AAnimation)
        end
    end
end)
end
